policy_module(local_user_u, 1.0.0)

## <desc>
## <p>
## Enable debug helpers
## </p>
## </desc>
gen_tunable(local_user_u_debug, false)

## <desc>
## <p>
## Allow to use journalctl
## </p>
## </desc>
gen_tunable(local_user_u_journalctl, true)

# TODO: optional_policy stuff missing?
require {
	attribute login_userdomain;
	type sysadm_t;
	type staff_t;
	type user_t;
	role user_r;
	role system_r;
}

### login
### start: Terminal (gui app)
# seems dbus_role stuff is totally missing, this breaks all kinds of stuff
# from: policy/modules/roles/unconfineduser.te
# dbus_role_template needs these fixes
# /usr/bin/dbus-broker-launch --scope user
require {
	attribute systemd_unit_file_type;
	class service start;
	class system reload;
	type user_dbusd_t;
	type user_tmp_t;
}
allow user_dbusd_t login_userdomain:system reload;
allow user_dbusd_t systemd_unit_file_type:service start;
allow user_dbusd_t user_tmp_t:service start;

### Allow: loginctl session-status <id>
require {
	type init_var_run_t;
	class service status;
}
allow login_userdomain init_var_run_t:service status;

### Allow: login/logout w/ my systemd_logind_var_run_t/systemd_unit_file_t fc
# systemctl --user daemon-reexec: does not still work, it does not start systemd user instance
require {
	type gpg_agent_t;
	type gpg_agent_tmp_t;
	type gpg_secret_t;
	type gpg_t;
	type init_t;
	type pulseaudio_t;
	type pulseaudio_var_lib_t;
	type system_dbusd_var_run_t;
	type systemd_logind_t;
	type systemd_logind_var_run_t;
	type systemd_unit_file_t;
	type xdm_t;
}

## /run/user/<uid>/bus
manage_sock_files_pattern({ login_userdomain systemd_logind_t }, user_tmp_t, system_dbusd_var_run_t)

## /run/user/<uid>/gnupg
userdom_user_tmp_filetrans({ gpg_t login_userdomain systemd_logind_t }, gpg_secret_t, dir, "gnupg")
manage_dirs_pattern({ gpg_t login_userdomain systemd_logind_t xdm_t }, user_tmp_t, gpg_secret_t)
filetrans_pattern(gpg_agent_t, gpg_secret_t, gpg_agent_tmp_t, sock_file)
manage_sock_files_pattern({ login_userdomain systemd_logind_t }, gpg_secret_t, gpg_agent_tmp_t)

## /run/user/<uid>/pulse
manage_dirs_pattern({ login_userdomain systemd_logind_t xdm_t }, user_tmp_t, pulseaudio_var_lib_t)
userdom_user_tmp_filetrans({ login_userdomain systemd_logind_t }, pulseaudio_var_lib_t, dir, "pulse")
# /run/user/<uid>/pulse/native: all these can create/remove it
manage_sock_files_pattern({ login_userdomain pulseaudio_t systemd_logind_t }, pulseaudio_var_lib_t, pulseaudio_var_lib_t)

# /run/user/<uid>/systemd/units
userdom_user_tmp_filetrans({ login_userdomain systemd_logind_t }, systemd_logind_var_run_t, dir, "systemd")

## /run/user/<uid>/systemd/inaccessible: both of these can create/remove these files
# /run/user/<uid>/systemd/inaccessible/chr
manage_chr_files_pattern({ login_userdomain systemd_logind_t }, systemd_logind_var_run_t, systemd_logind_var_run_t)
# /run/user/<uid>/systemd/inaccessible/dir
manage_dirs_pattern({ login_userdomain systemd_logind_t }, systemd_logind_var_run_t, systemd_logind_var_run_t)
# /run/user/<uid>/systemd/inaccessible/fifo
manage_fifo_files_pattern({ login_userdomain systemd_logind_t }, systemd_logind_var_run_t, systemd_logind_var_run_t)
# /run/user/<uid>/systemd/inaccessible/reg
manage_files_pattern({ login_userdomain systemd_logind_t }, systemd_logind_var_run_t, systemd_logind_var_run_t)
# /run/user/<uid>/systemd/inaccessible/sock
manage_sock_files_pattern({ login_userdomain systemd_logind_t }, systemd_logind_var_run_t, systemd_logind_var_run_t)

# /run/user/<uid>/systemd/units
manage_dirs_pattern(systemd_logind_t, user_tmp_t, systemd_unit_file_t)
manage_files_pattern(systemd_logind_t, systemd_unit_file_t, systemd_unit_file_t)
manage_lnk_files_pattern(systemd_logind_t, systemd_unit_file_t, systemd_unit_file_t)

# /run/systemd/user
filetrans_pattern({ init_t systemd_logind_t }, init_var_run_t, systemd_unit_file_t, dir, "user")


### Allow some: ps: /proc/<pid>
require {
	class dir getattr;
	type fprintd_t;
	type fwupd_cache_t;
	type kernel_t;
	type realmd_t;
	type systemd_hostnamed_t;
	type udev_t;
	type xdm_t;
}
dontaudit login_userdomain { fprintd_t udev_t xdm_t }:dir getattr;
allow login_userdomain fprintd_t:dir getattr;
allow login_userdomain fwupd_cache_t:dir { getattr open };
allow login_userdomain kernel_t:dir getattr;
allow login_userdomain realmd_t:dir getattr;
allow login_userdomain systemd_hostnamed_t:dir getattr;
allow login_userdomain udev_t:dir search;
allow login_userdomain xdm_t:dir search;

### start: Files (gui app)
# write transient directories/files and such
systemd_manage_unit_dirs(login_userdomain)
systemd_manage_all_unit_files(login_userdomain)

### start wireshark
# maybe not allow?
allow login_userdomain self:netlink_generic_socket create;

### start /usr/bin/sepolicy gui
# maybe not allow?
#allow login_userdomain semanage_t:dbus send_msg;
#seutil_dbus_chat_semanage(login_userdomain)

### run seinfo
# maybe not allow
#allow login_userdomain security_t:security read_policy;

### login via gnome
# fixed in: selinux-policy 4c86f565d0fc14850250fd182aafbda0c69c48a1
kerberos_read_keytab(ssh_t)

### gnome-shell gsd-color
# why not? missing in roles/unprivuser.te
systemd_hwdb_mmap_config(login_userdomain)

### login via gnome
# gnome-keyring-d
# bug in gnome_role_template
require {
	class process setsched;
	type user_gkeyringd_t;
}
allow user_gkeyringd_t self:process setsched;

### Allow gvfsd-fuse /home/user/.cache/gvfs
require {
	type cache_home_t;
	class dir mounton;
}
allow login_userdomain cache_home_t:dir mounton;

### FIX: logout via gnome
# allow user_t mount_t:process { sigkill signal };
# bug: staff_t has this: selinux-policy a90f520338893e913011073937221c0ce3391347 BZ(1544272)
# reported as https://github.com/fedora-selinux/selinux-policy/issues/520
mount_sigkill(login_userdomain)

### LOCAL: Allow: to run ssh-agent with socket in /run/user/<uid>/ssh-agent.socket
# Moved file from original position
# Respective line at fc
require {
	attribute ssh_agent_type;
	type ssh_agent_tmp_t;
}
userdom_user_tmp_filetrans(ssh_agent_type, ssh_agent_tmp_t, sock_file, "ssh-agent.socket")

### grub2-set-bootflag
require {
	type boot_t;
}
allow login_userdomain boot_t:dir rw_dir_perms;
allow login_userdomain boot_t:file manage_file_perms;

### /usr/libexec/flatpak-system-helper via dbus
optional_policy(`
	require {
		type flatpak_helper_t;
		class dbus send_msg;
	}
	allow login_userdomain flatpak_helper_t:dbus send_msg;
')

### flatpack files: /var/lib/flatpak
# bwrap
require {
	class cap_userns setpcap;
	class file { getattr map open read };
	class lnk_file { getattr read };
	type nsfs_t;
	type user_dbusd_t;
	type var_lib_t;
}
allow login_userdomain nsfs_t:file getattr;
allow login_userdomain self:cap_userns setpcap;
allow login_userdomain var_lib_t:file map;
allow login_userdomain var_lib_t:lnk_file { getattr read };
allow user_dbusd_t var_lib_t:file { open read };
allow user_dbusd_t var_lib_t:lnk_file read;

### journalctl needs to access: /var/lib/systemd/catalog/database
tunable_policy(`local_user_u_journalctl',`
	init_read_var_lib_files(login_userdomain)
	init_search_var_lib_dirs(login_userdomain)
	init_read_var_lib_files(journalctl_t)
	init_search_var_lib_dirs(journalctl_t)
	require {
		class dir { read search };
		class file map;
		type init_var_lib_t;
		type journalctl_t;
	}
	allow journalctl_t init_var_lib_t:file map;
	allow login_userdomain init_var_lib_t:dir { read search };

	### Use journalctl
	require {
		type tmp_t;
		type journalctl_t;
		class dir write;
	}
	allow journalctl_t tmp_t:dir write;
')

### chrome uses this
# $ setsebool -P selinuxuser_udp_server 1

### gnome-software /var/cache/app-info
require {
	class dir { read search };
	type fwupd_cache_t;
}
allow login_userdomain fwupd_cache_t:dir { read search };

### /usr/lib/polkit-1/polkit-agent-helper-1
require {
	class unix_stream_socket { read write };
	type policykit_auth_t;
}
allow policykit_auth_t login_userdomain:unix_stream_socket { read write };

### pulseaudio
require {
	class unix_stream_socket { read write };
	type pulseaudio_t;
}
allow pulseaudio_t login_userdomain:unix_stream_socket { read write };

### /usr/lib/systemd/systemd-user-runtime-dir
require {
	class capability net_admin;
	type systemd_logind_t;
}
allow systemd_logind_t self:capability net_admin;

### Allow: systemd to kill processes
require {
	class process signal;
	type mount_t;
}
allow login_userdomain mount_t:process signal;

### Allow: nice gnome-shell
require {
	class capability sys_nice;
}
allow login_userdomain self:capability sys_nice;

### Allow: gnome-terminal something
require {
	class process getpgid;
	type kernel_t;
}
allow login_userdomain kernel_t:process getpgid;

### Deny: ls /run/systemd/inaccessible/
require {
	class blk_file getattr;
	class chr_file getattr;
	type init_var_run_t;
}
dontaudit login_userdomain init_var_run_t:blk_file getattr;
dontaudit login_userdomain init_var_run_t:chr_file getattr;

### dri_device_t, seems harmless?
### journalctl
### login etc
# prob should not be allowed
require {
	class chr_file { getattr read write };
	type dri_device_t;
	type journalctl_t;
	type utempter_t;
}
# some programs access: /dev/dri/card0
dontaudit journalctl_t dri_device_t:chr_file { read write };
dontaudit user_dbusd_t dri_device_t:chr_file { read write };
dontaudit utempter_t dri_device_t:chr_file { read write };

### login_userdomain:file read /proc/<pid>/mountinfo harmless?
### journalctl
### login etc
# dunno if this should be allowed
require {
	class file read;
	type journalctl_t;
	type ssh_t;
	type utempter_t;
}
dontaudit { journalctl_t ssh_t utempter_t } login_userdomain:file read;

### Deny: Xorg
require {
	class capability sys_admin;
}
dontaudit login_userdomain self:capability sys_admin;

### Deny: sudo
require {
	class capability sys_resource;
}
dontaudit login_userdomain self:capability sys_resource;

### Deny: write sudo ts file
require {
	type pam_var_run_t;
	class dir write;
}
dontaudit login_userdomain pam_var_run_t:dir write;

### Deny: run audit2allow
require {
	class security read_policy;
	type security_t;
}
dontaudit login_userdomain security_t:security read_policy;

### Debug
tunable_policy(`local_user_u_debug',`
require {
	class cap_userns sys_ptrace;
	class process ptrace;
	type journalctl_t;
	type syslogd_t;
}
allow syslogd_t self:cap_userns sys_ptrace;
allow login_userdomain journalctl_t:process ptrace;
allow login_userdomain self:cap_userns sys_ptrace;
')

### watch
require {
	class dir watch;
	type fonts_t;
	type fwupd_cache_t;
	type lib_t;
	type locale_t;
	type root_t;
	type system_conf_t;
	type systemd_logind_var_run_t;
	type user_dbusd_t;
	type var_lib_t;
	type var_run_t;
}
allow user_dbusd_t var_lib_t:dir watch;
allow user_t fonts_t:dir watch;
allow user_t fwupd_cache_t:dir watch;
allow user_t lib_t:dir watch;
allow user_t locale_t:dir watch;
allow user_t root_t:dir watch;
allow user_t system_conf_t:dir watch;
allow user_t systemd_logind_var_run_t:dir watch;
allow user_t var_run_t:dir watch;

### What?
require {
	class file { create read };
	class sock_file write;
	type init_var_run_t;
	type pulseaudio_var_lib_t;
	type session_dbusd_tmp_t;
}
allow user_t init_var_run_t:file read;
allow user_t pulseaudio_var_lib_t:file create;
allow user_t session_dbusd_tmp_t:sock_file write;

### use journalctl
require {
	class dir { add_name write };
	class file { create map open read unlink write };
	type journalctl_t;
	type user_home_dir_t;
}
allow journalctl_t user_home_dir_t:dir { add_name write };
allow journalctl_t user_home_dir_t:file { create open write };

### login
require {
	class dir write;
	class file { open write };
	type init_var_run_t;
	type pulseaudio_var_lib_t;
}
allow user_t init_var_run_t:file open;
allow user_t pulseaudio_var_lib_t:file { open write };

### start stuff
require {
	class service start;
	class system status;
	type etc_t;
	type user_dbusd_t;
	type usr_t;
}
allow user_dbusd_t user_t:system status;
allow user_t etc_t:service start;
allow user_t usr_t:service start;

### what?
require {
	type user_home_dir_t;
	class file { create map open read unlink write };
}
allow user_t user_home_dir_t:file write;
